/*
 * This file automatically generated by genglsl from ../../src/pvr2/shaders.glsl
 */
struct shader_def {
    int type;
    const char *source;
};
const struct shader_def shader_source[] = {
    {GLSL_VERTEX_SHADER,"uniform mat4 view_matrix;\n\
attribute vec4 in_vertex;\n\
attribute vec4 in_colour;\n\
attribute vec4 in_colour2; /* rgb = colour, a = fog */\n\
attribute vec4 in_texcoord; /* uv = coord, z = palette, w = mode */\n\
\n\
varying vec4 frag_colour;\n\
varying vec4 frag_colour2;\n\
varying vec4 frag_texcoord;\n\
void main()\n\
{\n\
    vec4 tmp = view_matrix * in_vertex;\n\
    float w = in_vertex.z;\n\
    gl_Position  = tmp * w;\n\
    frag_colour = in_colour;\n\
    frag_colour2 = in_colour2;\n\
    frag_texcoord = in_texcoord;\n\
}\n\
\n\
"},
    {GLSL_FRAGMENT_SHADER,"precision mediump float;\n\
uniform float alpha_ref;\n\
uniform sampler2D primary_texture;\n\
uniform sampler2D palette_texture;\n\
uniform vec3 fog_colour1;\n\
uniform vec3 fog_colour2;\n\
varying vec4 frag_colour;\n\
varying vec4 frag_colour2;\n\
varying vec4 frag_texcoord;\n\
\n\
void main()\n\
{\n\
	vec4 texel = texture2D( primary_texture, frag_texcoord.xy );\n\
	vec4 tex = texel;\n\
	if( frag_texcoord.z >= 0.0 ) {\n\
	    float idx = floor(texel.r * 255.0 + 0.5);\n\
	    float x = frag_texcoord.z + (idx * (1.0/1024.0));\n\
	    tex = texture2D( palette_texture, vec2(x, 0.5) );\n\
	}\n\
	/* HACK: unfortunately we have to maintain compatibility with GLSL 1.20,\n\
	 * which only supports varying float. So since we're propagating texcoord\n\
	 * anyway, overload the last component to indicate texture mode. \n\
	 */\n\
        vec3 main_colour;\n\
	if( frag_texcoord.w == 0.0 ) {\n\
            main_colour = frag_colour.rgb * tex.rgb + frag_colour2.rgb;\n\
	    gl_FragColor.a = frag_colour.a * tex.a;\n\
	} else if( frag_texcoord.w >= 1.5 ) {\n\
            main_colour = frag_colour.rgb;\n\
	    gl_FragColor.a = frag_colour.a;\n\
	} else {\n\
	    main_colour =  mix(frag_colour.rgb,tex.rgb,tex.a) + frag_colour2.rgb;\n\
	    gl_FragColor.a = frag_colour.a;\n\
	}\n\
        if( gl_FragColor.a < alpha_ref ) {\n\
            discard;\n\
        } else { \n\
	    	if( frag_colour2.a >= 0.0 ) {\n\
                gl_FragColor.rgb = mix( main_colour, fog_colour1, frag_colour2.a );\n\
            } else {\n\
                gl_FragColor.rgb = mix( main_colour, fog_colour2, -frag_colour2.a );\n\
            }\n\
        } \n\
}\n\
\n\
"},
    {GLSL_VERTEX_SHADER,"uniform mat4 view_matrix;\n\
attribute vec2 in_vertex;\n\
attribute vec4 in_colour;\n\
attribute vec2 in_texcoord; /* uv = coord, z = palette, w = mode */\n\
\n\
varying vec4 frag_colour;\n\
varying vec2 frag_texcoord;\n\
void main()\n\
{\n\
    gl_Position = view_matrix * vec4(in_vertex.x,in_vertex.y,0.0,1.0);\n\
    frag_colour = in_colour;\n\
    frag_texcoord = in_texcoord;\n\
}\n\
\n\
"},
    {GLSL_FRAGMENT_SHADER,"precision mediump float;\n\
\n\
uniform sampler2D primary_texture;\n\
varying vec4 frag_colour;\n\
varying vec2 frag_texcoord;\n\
\n\
void main()\n\
{\n\
	vec4 tex = texture2D( primary_texture, frag_texcoord.xy );\n\
        gl_FragColor.rgb = mix( frag_colour.rgb, tex.rgb, frag_colour.a );\n\
        gl_FragColor.a = 1.0;\n\
}\n\
\n\
"},
    {GLSL_VERTEX_SHADER,"uniform mat4 view_matrix;\n\
attribute vec2 in_vertex;\n\
attribute vec2 in_texcoord;\n\
varying vec2 frag_texcoord;\n\
void main() {\n\
    gl_Position = view_matrix * vec4(in_vertex.xy,0.0,1.0);\n\
    frag_texcoord = in_texcoord;\n\
}\n\
\n\
"},
    {GLSL_FRAGMENT_SHADER,"precision mediump float;\n\
uniform sampler2D primary_texture;\n\
uniform vec2 texel_size; /* 1/width, 1/height */\n\
uniform float sharp; /* 0..1 */\n\
varying vec2 frag_texcoord;\n\
void main(){\n\
    vec3 c  = texture2D(primary_texture, frag_texcoord).rgb;\n\
    vec3 cx = texture2D(primary_texture, frag_texcoord + vec2(texel_size.x,0.0)).rgb +\n\
              texture2D(primary_texture, frag_texcoord - vec2(texel_size.x,0.0)).rgb;\n\
    vec3 cy = texture2D(primary_texture, frag_texcoord + vec2(0.0,texel_size.y)).rgb +\n\
              texture2D(primary_texture, frag_texcoord - vec2(0.0,texel_size.y)).rgb;\n\
    vec3 avg = (cx + cy) * 0.25;\n\
    vec3 hp = c - avg; /* high-pass */\n\
    vec3 outc = c + clamp(hp * (0.5 + sharp), -0.25, 0.25);\n\
    gl_FragColor = vec4(outc, 1.0);\n\
}\n\
\n\
"},
    {GLSL_NO_SHADER,NULL}};

const int program_list[][3] = {
    {DEFAULT_VERTEX_SHADER,DEFAULT_FRAGMENT_SHADER,GLSL_NO_SHADER},
    {BASIC_VERTEX_SHADER,BASIC_FRAGMENT_SHADER,GLSL_NO_SHADER},
    {UPSCALE_VERTEX_SHADER,UPSCALE_FRAGMENT_SHADER,GLSL_NO_SHADER},
    {GLSL_NO_SHADER}};

static gl_program_t prog_pvr2_shader_id;
static GLint var_pvr2_shader_view_matrix_loc;
static GLint var_pvr2_shader_in_vertex_loc;
static GLint var_pvr2_shader_in_colour_loc;
static GLint var_pvr2_shader_in_colour2_loc;
static GLint var_pvr2_shader_in_texcoord_loc;
static GLint var_pvr2_shader_alpha_ref_loc;
static GLint var_pvr2_shader_primary_texture_loc;
static GLint var_pvr2_shader_palette_texture_loc;
static GLint var_pvr2_shader_fog_colour1_loc;
static GLint var_pvr2_shader_fog_colour2_loc;

static gl_program_t prog_basic_shader_id;
static GLint var_basic_shader_view_matrix_loc;
static GLint var_basic_shader_in_vertex_loc;
static GLint var_basic_shader_in_colour_loc;
static GLint var_basic_shader_in_texcoord_loc;
static GLint var_basic_shader_primary_texture_loc;

static gl_program_t prog_upscale_simple_id;
static GLint var_upscale_simple_view_matrix_loc;
static GLint var_upscale_simple_in_vertex_loc;
static GLint var_upscale_simple_in_texcoord_loc;
static GLint var_upscale_simple_primary_texture_loc;
static GLint var_upscale_simple_texel_size_loc;
static GLint var_upscale_simple_sharp_loc;

static void glsl_cleanup_pvr2_shader() {
    glsl_disable_attrib(var_pvr2_shader_in_vertex_loc);
    glsl_disable_attrib(var_pvr2_shader_in_colour_loc);
    glsl_disable_attrib(var_pvr2_shader_in_colour2_loc);
    glsl_disable_attrib(var_pvr2_shader_in_texcoord_loc);
}

void glsl_use_pvr2_shader() {
    glsl_use_program(prog_pvr2_shader_id);
    glsl_set_cleanup_fn(glsl_cleanup_pvr2_shader);
    glsl_enable_attrib(var_pvr2_shader_in_vertex_loc);
    glsl_enable_attrib(var_pvr2_shader_in_colour_loc);
    glsl_enable_attrib(var_pvr2_shader_in_colour2_loc);
    glsl_enable_attrib(var_pvr2_shader_in_texcoord_loc);
}
void glsl_set_pvr2_shader_view_matrix(GLfloat * value){ /* uniform mat4 view_matrix */ 
    glsl_set_uniform_mat4(var_pvr2_shader_view_matrix_loc,value);
}
void glsl_set_pvr2_shader_in_vertex_pointer(GLfloat * ptr, GLsizei stride){ /* attribute vec4 in_vertex */ 
    glsl_set_attrib_vec4(var_pvr2_shader_in_vertex_loc,stride, ptr);
}
void glsl_set_pvr2_shader_in_vertex_vec3_pointer(GLfloat * ptr, GLsizei stride){ /* attribute vec4 in_vertex */ 
    glsl_set_attrib_vec3(var_pvr2_shader_in_vertex_loc,stride, ptr);
}
void glsl_set_pvr2_shader_in_vertex_vec2_pointer(GLfloat * ptr, GLsizei stride){ /* attribute vec4 in_vertex */ 
    glsl_set_attrib_vec2(var_pvr2_shader_in_vertex_loc,stride, ptr);
}
void glsl_set_pvr2_shader_in_colour_pointer(GLfloat * ptr, GLsizei stride){ /* attribute vec4 in_colour */ 
    glsl_set_attrib_vec4(var_pvr2_shader_in_colour_loc,stride, ptr);
}
void glsl_set_pvr2_shader_in_colour_vec3_pointer(GLfloat * ptr, GLsizei stride){ /* attribute vec4 in_colour */ 
    glsl_set_attrib_vec3(var_pvr2_shader_in_colour_loc,stride, ptr);
}
void glsl_set_pvr2_shader_in_colour_vec2_pointer(GLfloat * ptr, GLsizei stride){ /* attribute vec4 in_colour */ 
    glsl_set_attrib_vec2(var_pvr2_shader_in_colour_loc,stride, ptr);
}
void glsl_set_pvr2_shader_in_colour2_pointer(GLfloat * ptr, GLsizei stride){ /* attribute vec4 in_colour2 */ 
    glsl_set_attrib_vec4(var_pvr2_shader_in_colour2_loc,stride, ptr);
}
void glsl_set_pvr2_shader_in_colour2_vec3_pointer(GLfloat * ptr, GLsizei stride){ /* attribute vec4 in_colour2 */ 
    glsl_set_attrib_vec3(var_pvr2_shader_in_colour2_loc,stride, ptr);
}
void glsl_set_pvr2_shader_in_colour2_vec2_pointer(GLfloat * ptr, GLsizei stride){ /* attribute vec4 in_colour2 */ 
    glsl_set_attrib_vec2(var_pvr2_shader_in_colour2_loc,stride, ptr);
}
void glsl_set_pvr2_shader_in_texcoord_pointer(GLfloat * ptr, GLsizei stride){ /* attribute vec4 in_texcoord */ 
    glsl_set_attrib_vec4(var_pvr2_shader_in_texcoord_loc,stride, ptr);
}
void glsl_set_pvr2_shader_in_texcoord_vec3_pointer(GLfloat * ptr, GLsizei stride){ /* attribute vec4 in_texcoord */ 
    glsl_set_attrib_vec3(var_pvr2_shader_in_texcoord_loc,stride, ptr);
}
void glsl_set_pvr2_shader_in_texcoord_vec2_pointer(GLfloat * ptr, GLsizei stride){ /* attribute vec4 in_texcoord */ 
    glsl_set_attrib_vec2(var_pvr2_shader_in_texcoord_loc,stride, ptr);
}
void glsl_set_pvr2_shader_alpha_ref(float value){ /* uniform float alpha_ref */ 
    glsl_set_uniform_float(var_pvr2_shader_alpha_ref_loc,value);
}
void glsl_set_pvr2_shader_primary_texture(int value){ /* uniform sampler2D primary_texture */ 
    glsl_set_uniform_sampler2D(var_pvr2_shader_primary_texture_loc,value);
}
void glsl_set_pvr2_shader_palette_texture(int value){ /* uniform sampler2D palette_texture */ 
    glsl_set_uniform_sampler2D(var_pvr2_shader_palette_texture_loc,value);
}
void glsl_set_pvr2_shader_fog_colour1(GLfloat * value){ /* uniform vec3 fog_colour1 */ 
    glsl_set_uniform_vec3(var_pvr2_shader_fog_colour1_loc,value);
}
void glsl_set_pvr2_shader_fog_colour2(GLfloat * value){ /* uniform vec3 fog_colour2 */ 
    glsl_set_uniform_vec3(var_pvr2_shader_fog_colour2_loc,value);
}

static void glsl_cleanup_basic_shader() {
    glsl_disable_attrib(var_basic_shader_in_vertex_loc);
    glsl_disable_attrib(var_basic_shader_in_colour_loc);
    glsl_disable_attrib(var_basic_shader_in_texcoord_loc);
}

void glsl_use_basic_shader() {
    glsl_use_program(prog_basic_shader_id);
    glsl_set_cleanup_fn(glsl_cleanup_basic_shader);
    glsl_enable_attrib(var_basic_shader_in_vertex_loc);
    glsl_enable_attrib(var_basic_shader_in_colour_loc);
    glsl_enable_attrib(var_basic_shader_in_texcoord_loc);
}
void glsl_set_basic_shader_view_matrix(GLfloat * value){ /* uniform mat4 view_matrix */ 
    glsl_set_uniform_mat4(var_basic_shader_view_matrix_loc,value);
}
void glsl_set_basic_shader_in_vertex_pointer(GLfloat * ptr, GLsizei stride){ /* attribute vec2 in_vertex */ 
    glsl_set_attrib_vec2(var_basic_shader_in_vertex_loc,stride, ptr);
}
void glsl_set_basic_shader_in_colour_pointer(GLfloat * ptr, GLsizei stride){ /* attribute vec4 in_colour */ 
    glsl_set_attrib_vec4(var_basic_shader_in_colour_loc,stride, ptr);
}
void glsl_set_basic_shader_in_colour_vec3_pointer(GLfloat * ptr, GLsizei stride){ /* attribute vec4 in_colour */ 
    glsl_set_attrib_vec3(var_basic_shader_in_colour_loc,stride, ptr);
}
void glsl_set_basic_shader_in_colour_vec2_pointer(GLfloat * ptr, GLsizei stride){ /* attribute vec4 in_colour */ 
    glsl_set_attrib_vec2(var_basic_shader_in_colour_loc,stride, ptr);
}
void glsl_set_basic_shader_in_texcoord_pointer(GLfloat * ptr, GLsizei stride){ /* attribute vec2 in_texcoord */ 
    glsl_set_attrib_vec2(var_basic_shader_in_texcoord_loc,stride, ptr);
}
void glsl_set_basic_shader_primary_texture(int value){ /* uniform sampler2D primary_texture */ 
    glsl_set_uniform_sampler2D(var_basic_shader_primary_texture_loc,value);
}

static void glsl_cleanup_upscale_simple() {
    glsl_disable_attrib(var_upscale_simple_in_vertex_loc);
    glsl_disable_attrib(var_upscale_simple_in_texcoord_loc);
}

void glsl_use_upscale_simple() {
    glsl_use_program(prog_upscale_simple_id);
    glsl_set_cleanup_fn(glsl_cleanup_upscale_simple);
    glsl_enable_attrib(var_upscale_simple_in_vertex_loc);
    glsl_enable_attrib(var_upscale_simple_in_texcoord_loc);
}
void glsl_set_upscale_simple_view_matrix(GLfloat * value){ /* uniform mat4 view_matrix */ 
    glsl_set_uniform_mat4(var_upscale_simple_view_matrix_loc,value);
}
void glsl_set_upscale_simple_in_vertex_pointer(GLfloat * ptr, GLsizei stride){ /* attribute vec2 in_vertex */ 
    glsl_set_attrib_vec2(var_upscale_simple_in_vertex_loc,stride, ptr);
}
void glsl_set_upscale_simple_in_texcoord_pointer(GLfloat * ptr, GLsizei stride){ /* attribute vec2 in_texcoord */ 
    glsl_set_attrib_vec2(var_upscale_simple_in_texcoord_loc,stride, ptr);
}
void glsl_set_upscale_simple_primary_texture(int value){ /* uniform sampler2D primary_texture */ 
    glsl_set_uniform_sampler2D(var_upscale_simple_primary_texture_loc,value);
}
void glsl_set_upscale_simple_texel_size(GLfloat * value){ /* uniform vec2 texel_size */ 
    glsl_set_uniform_vec2(var_upscale_simple_texel_size_loc,value);
}
void glsl_set_upscale_simple_sharp(float value){ /* uniform float sharp */ 
    glsl_set_uniform_float(var_upscale_simple_sharp_loc,value);
}

void glsl_clear_shader() {
    glsl_run_cleanup_fn();
    glsl_use_program(0);
}

static void glsl_init_programs( gl_program_t *ids ) {
    prog_pvr2_shader_id = ids[0];

    var_pvr2_shader_view_matrix_loc = glsl_get_uniform_location(prog_pvr2_shader_id, "view_matrix");
    var_pvr2_shader_in_vertex_loc = glsl_get_attrib_location(prog_pvr2_shader_id, "in_vertex");
    var_pvr2_shader_in_colour_loc = glsl_get_attrib_location(prog_pvr2_shader_id, "in_colour");
    var_pvr2_shader_in_colour2_loc = glsl_get_attrib_location(prog_pvr2_shader_id, "in_colour2");
    var_pvr2_shader_in_texcoord_loc = glsl_get_attrib_location(prog_pvr2_shader_id, "in_texcoord");
    var_pvr2_shader_alpha_ref_loc = glsl_get_uniform_location(prog_pvr2_shader_id, "alpha_ref");
    var_pvr2_shader_primary_texture_loc = glsl_get_uniform_location(prog_pvr2_shader_id, "primary_texture");
    var_pvr2_shader_palette_texture_loc = glsl_get_uniform_location(prog_pvr2_shader_id, "palette_texture");
    var_pvr2_shader_fog_colour1_loc = glsl_get_uniform_location(prog_pvr2_shader_id, "fog_colour1");
    var_pvr2_shader_fog_colour2_loc = glsl_get_uniform_location(prog_pvr2_shader_id, "fog_colour2");
    prog_basic_shader_id = ids[1];

    var_basic_shader_view_matrix_loc = glsl_get_uniform_location(prog_basic_shader_id, "view_matrix");
    var_basic_shader_in_vertex_loc = glsl_get_attrib_location(prog_basic_shader_id, "in_vertex");
    var_basic_shader_in_colour_loc = glsl_get_attrib_location(prog_basic_shader_id, "in_colour");
    var_basic_shader_in_texcoord_loc = glsl_get_attrib_location(prog_basic_shader_id, "in_texcoord");
    var_basic_shader_primary_texture_loc = glsl_get_uniform_location(prog_basic_shader_id, "primary_texture");
    prog_upscale_simple_id = ids[2];

    var_upscale_simple_view_matrix_loc = glsl_get_uniform_location(prog_upscale_simple_id, "view_matrix");
    var_upscale_simple_in_vertex_loc = glsl_get_attrib_location(prog_upscale_simple_id, "in_vertex");
    var_upscale_simple_in_texcoord_loc = glsl_get_attrib_location(prog_upscale_simple_id, "in_texcoord");
    var_upscale_simple_primary_texture_loc = glsl_get_uniform_location(prog_upscale_simple_id, "primary_texture");
    var_upscale_simple_texel_size_loc = glsl_get_uniform_location(prog_upscale_simple_id, "texel_size");
    var_upscale_simple_sharp_loc = glsl_get_uniform_location(prog_upscale_simple_id, "sharp");
}
